# handlers/search_handlers.py
from aiogram import F, types, filters, Router, fsm
import logging

import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from sqlalchemy import select
from db import get_db, beautiful_form_output_with_percent, User, get_user_by_tgid
from middlewares import UserCreatedMiddleware
from states import SearchStates
from ai import MatchAi
from utils import pay

search_router = Router()
search_router.message.outer_middleware(UserCreatedMiddleware())

reaction_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üëç"), types.KeyboardButton(text="üëé")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder=""
)

async def send_next_match(message: types.Message, state: fsm.context.FSMContext):
    data = await state.get_data()
    seen: list[int] = data.get("seen_results", [])

    async for session in get_db():
        searcher = await get_user_by_tgid(session, tgid=message.from_user.id)
        if not searcher:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.update_data(current_user=None)  # –û—á–∏—â–∞–µ–º current_user
            return False

        ai = MatchAi()
        stmt = select(User).where(User.tgid != searcher.tgid, User.is_active)
        all_users = (await session.execute(stmt)).scalars().all()

        # sort descending by compatibility
        ranked = sorted(
            all_users,
            key=lambda u: ai.get_percent(
                desc1=searcher.description,
                desc2=u.description,
                interest1=searcher.interests or [],
                interest2=u.interests or []
            ),
            reverse=True
        )

        # pick the first they haven't seen yet
        next_pair = None
        for u in ranked:
            if u.tgid not in seen:
                next_pair = (u, ai.get_percent(
                    desc1=searcher.description,
                    desc2=u.description,
                    interest1=searcher.interests or [],
                    interest2=u.interests or []
                ))
                break

        if not next_pair:
            logging.info(f"No more matches for {message.from_user.id}")
            await message.answer("–ê–Ω–∫–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.", reply_markup=types.ReplyKeyboardRemove())
            await state.update_data(current_user=None)  # –û—á–∏—â–∞–µ–º current_user
            return False

        user, percent = next_pair
        seen.append(user.tgid)
        await state.update_data(seen_results=seen)
        await state.update_data(current_user=user.tgid)

        output = beautiful_form_output_with_percent(user=user, percent=percent/100)
        if isinstance(output, list):
            await message.answer_media_group(output)
        else:
            await message.answer(output)
        return True

@search_router.message(filters.Command("search"))
async def cmd_start_search(message: types.Message, state: fsm.context.FSMContext):
    await state.set_state(SearchStates.in_search)
    await state.update_data(seen_results=[], current_user=None)
    logging.info(f"/search by {message.from_user.id}")
    await message.answer("–ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∞–Ω–∫–µ—Ç—ã –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å.")
    match_exist = await send_next_match(message, state)
    if match_exist:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:", reply_markup=reaction_kb)
    else:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /search !", reply_markup=types.ReplyKeyboardRemove())

@search_router.message(SearchStates.in_search, filters.Command("exit_search"))
async def cmd_exit_search(message: types.Message, state: fsm.context.FSMContext):
    await state.clear()
    logging.info(f"/exit_search by {message.from_user.id}")
    await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /search")


@search_router.message(SearchStates.in_search, F.text == "üëé")
async def cmd_next_search(message: types.Message, state: fsm.context.FSMContext):
    logging.info(f"Next match request by {message.from_user.id}")
    await message.answer("–ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –∞–Ω–∫–µ—Ç—ã –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å.")
    match_exist = await send_next_match(message, state)
    if match_exist:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:", reply_markup=reaction_kb)
    else:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /search !", reply_markup=types.ReplyKeyboardRemove())


@search_router.message(SearchStates.in_search, F.text == "üëç")
async def like_handler(message: types.Message, state: fsm.context.FSMContext):
    user_id = await state.get_value("current_user")
    if not user_id:
        logging.warning(f"No current_user_id in state for {message.from_user.id}")
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /search", reply_markup=types.ReplyKeyboardRemove())
        return

    

    async for session in get_db():
        user = await get_user_by_tgid(session=session, tgid=user_id)
        if not user:
            logging.error(f"User {user_id} disappeared from DB")
            await message.answer("–≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é...")
            match_exist = await send_next_match(message, state)
            if match_exist:
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:", reply_markup=reaction_kb)
            else:
                await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /search !", reply_markup=types.ReplyKeyboardRemove())
            return

        ok = await pay(message, state)
        if ok:
            logging.info(f"–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞: {message.from_user.id} –∫—É–ø–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç @{user.username}")
            await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!\n@{user.username}", reply_markup=types.ReplyKeyboardRemove())

            liked_user: User = await get_user_by_tgid(session=session, tgid=message.from_user.id)
            ai = MatchAi()

            percent = ai.get_percent(
                desc1=user.description,
                desc2=liked_user.description,
                interest1=user.interests,
                interest2=liked_user.interests
            )

            output = beautiful_form_output_with_percent(user=liked_user, percent=percent/100)
            if isinstance(output, list):
                await message.bot.send_message(user.tgid, f"–í–∞—Å –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª: @{liked_user.username}")
                await message.bot.send_media_group(user.tgid, output)
            else:
                await message.bot.send_message(user.tgid, f"–í–∞—Å –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª @{liked_user.username}:\n{output}")
        else:
            logging.error(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{message.from_user.username}, –∫–æ–Ω—Ç–∞–∫—Ç @{user.username}")
            await message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–¥–µ–ª–∞–π—Ç–µ /report –∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É", reply_markup=types.ReplyKeyboardRemove())

